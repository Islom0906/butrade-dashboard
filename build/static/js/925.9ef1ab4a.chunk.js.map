{"version":3,"file":"static/js/925.9ef1ab4a.chunk.js","mappings":"iKAIA,MAmBA,EAnBkBA,IAAkD,IAAjD,MAACC,EAAK,KAACC,EAAI,SAACC,EAAQ,cAACC,EAAa,QAACC,GAAQL,EAC1D,OACIM,EAAAA,EAAAA,KAACC,EAAAA,EAAKC,KAAI,CACNP,MAAOI,GAAUI,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACbJ,EAAAA,EAAAA,KAAA,KAAAI,SAAIT,KACJK,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,KAAAI,SAAIL,QACDC,EAAAA,EAAAA,KAAA,OAAAI,SAAMT,IACbC,KAAMA,EAENS,MAAO,CAAC,CACJR,SAAUA,EAAUS,QAASR,IAC9BM,UAEHJ,EAAAA,EAAAA,KAACO,EAAAA,EAAK,KACE,C,mOCLpB,MAAMC,EAAmB,CACrBC,OAAQ,GACRC,SAAU,GACVC,SAAU,IAuWd,EAlWyBC,KAErB,MAAOC,GAAQZ,EAAAA,EAAKa,UACdC,GAAWC,EAAAA,EAAAA,OACX,OAACC,IAAUC,EAAAA,EAAAA,KAAYC,GAASA,EAAMC,WACtCC,GAAWC,EAAAA,EAAAA,OAGVC,EAAeC,IAAoBC,EAAAA,EAAAA,UAAS,KAO/CC,OAAQC,EACRC,KAAMC,EACNC,UAAWC,EACXC,UAAWC,IACXC,EAAAA,EAAAA,cAAYxC,IAAA,IAAC,IAACyC,EAAG,SAAEC,GAAS1C,EAAA,OAAK2C,EAAAA,EAAWC,SAASH,EAAKC,EAAS,GAAE,CAErEG,UAAWA,KAEPjC,EAAAA,GAAQkC,QAAQ,UAAU,EAE9BC,QAAUC,IACN,IAAK,IAAIC,KAAOD,EAAME,SAAShB,KAC3BtB,EAAAA,GAAQoC,MAAM,GAADG,OAAIF,EAAG,MAAAE,OAAKH,EAAME,SAAShB,KAAKe,GAAK,IACtD,KAOJjB,OAAQoB,EACRlB,KAAMmB,EACNjB,UAAWkB,EACXhB,UAAWiB,IAEXf,EAAAA,EAAAA,cAAYgB,IAAA,IAAC,IAACf,EAAG,KAAEP,GAAKsB,EAAA,OAAKb,EAAAA,EAAWC,SAASH,EAAKP,EAAK,GAAE,CAC7DW,UAAWA,KAEPjC,EAAAA,GAAQkC,QAAQ,UAAU,EAE9BC,QAAUC,IACN,IAAK,IAAIC,KAAOD,EAAME,SAAShB,KAC3BtB,EAAAA,GAAQoC,MAAM,GAADG,OAAIF,EAAG,MAAAE,OAAKH,EAAME,SAAShB,KAAKe,GAAK,IACtD,KAMJb,UAAWqB,EACXvB,KAAMwB,EACNC,QAASC,EACTtB,UAAWuB,IAEXC,EAAAA,EAAAA,UAAS,CAAC,gBAAiBvC,IAAS,IAAMoB,EAAAA,EAAWoB,YAAY,kBAAmBxC,IAAS,CAC7FyC,SAAS,KAMThC,OAAQiC,EACR7B,UAAW8B,EACXhC,KAAMiC,EACN7B,UAAW8B,IACX5B,EAAAA,EAAAA,cAAY6B,IAAA,IAAC,IACI5B,EAAG,KAAEP,EAAI,GAAEoC,GACdD,EAAA,OAAK1B,EAAAA,EAAWjB,SAASe,EAAKP,EAAMoC,EAAG,GAAE,CACvDzB,UAAWA,KACPjC,EAAAA,GAAQkC,QAAQ,UAAU,EAE9BC,QAAUC,IACN,IAAK,IAAIC,KAAOD,EAAME,SAAShB,KAC3BtB,EAAAA,GAAQoC,MAAM,GAADG,OAAIF,EAAG,MAAAE,OAAKH,EAAME,SAAShB,KAAKe,GAAK,IACtD,KAMDjB,OAAQuC,IAAsB/B,EAAAA,EAAAA,cAAYgC,IAAA,IAAC,IAAC/B,EAAG,IAAEgC,GAAID,EAAA,OAAK7B,EAAAA,EAAW+B,aAAajC,EAAKgC,EAAI,GAAE,CAChG5B,UAAWA,IAAMjC,EAAAA,GAAQkC,QAAQ,WACjCC,QAAUC,GAAUpC,EAAAA,GAAQoC,MAAMA,EAAMpC,YAM5C+D,EAAAA,EAAAA,YAAU,KACFP,GACAzC,EAAS,CAACiD,KAAMC,EAAAA,GAAWC,QAAS,MAEpCvB,GAAuBa,IACvB/C,EAAS,YACb,GACD,CAACgC,EAAcc,KAGlBQ,EAAAA,EAAAA,YAAU,KACS,KAAXpD,GACAqC,GACJ,GACD,CAACrC,KAGJoD,EAAAA,EAAAA,YAAU,KACS,KAAXpD,GACAJ,EAAK4D,eAAejE,EACxB,GACD,KAIH6D,EAAAA,EAAAA,YAAU,KACN,MAAM5D,EAAS,GAgBf,QAfyBiE,IAArBtB,IACgB,OAAhBA,QAAgB,IAAhBA,GAAAA,EAAkBuB,eAAeC,KAAIC,IACjC,MAAMjD,EAAO,CACTkD,IAAKD,EAAMb,GACXpE,KAAMiF,EAAMb,GACZe,OAAQ,OACR5C,IAAK0C,EAAMA,OAEfpE,EAAOuE,KAAKpD,EAAK,KAOrB2B,EAAqB,CAErB,MAAM0B,EAAO,CACTvE,SAA0B,OAAhB0C,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkB1C,SAC5BC,SAA0B,OAAhByC,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBzC,SAC5BF,UAIJe,EAAiBf,GACjBI,EAAK4D,eAAeQ,EACxB,IAED,CAAC7B,KA8BJiB,EAAAA,EAAAA,YAAU,KACN,MAAMa,EAAeC,KAAKC,MAAMC,aAAaC,QAAQ,iBACjDJ,IACAA,EAAazE,OAAS,GACtBI,EAAK4D,eAAeS,IAGxB,MAAMK,EAAqBA,KAEvBF,aAAaG,QAAQ,eAAgBL,KAAKM,UAAU5E,EAAK6E,kBAAmB,EAKhF,OAFAC,OAAOC,iBAAiB,eAAgBL,GAEjC,KACHF,aAAaQ,WAAW,cACxBR,aAAaQ,WAAW,gBACxBF,OAAOG,oBAAoB,eAAgBP,EAAmB,CACjE,GACF,KAGHlB,EAAAA,EAAAA,YAAU,KAEN,GAAIpC,EAAqB,CAAC,IAAD8D,EAAAC,EAAAC,EACrB,MAAMC,EAAe,IAAI3E,GACnB4E,EAAY,CACdrB,IAAiB,OAAZjD,QAAY,IAAZA,GAAuB,QAAXkE,EAAZlE,EAAcpB,OAAO,UAAE,IAAAsF,OAAX,EAAZA,EAAyB/B,GAC9BpE,KAAkB,OAAZiC,QAAY,IAAZA,GAAuB,QAAXmE,EAAZnE,EAAcpB,OAAO,UAAE,IAAAuF,OAAX,EAAZA,EAAyBhC,GAC/Be,OAAQ,OACR5C,IAAiB,OAAZN,QAAY,IAAZA,GAAuB,QAAXoE,EAAZpE,EAAcpB,OAAO,UAAE,IAAAwF,OAAX,EAAZA,EAAyB9D,KAElC+D,EAAalB,KAAKmB,GAClBtF,EAAK4D,eAAe,CAAChE,OAAQ,CAAC0F,KAC9B3E,EAAiB0E,EACrB,IAED,CAACrE,IA4DJ,OAAQ7B,EAAAA,EAAAA,KAAA,OAAAI,SACF4C,GAAuBG,GAAuBS,GAAsB7B,GAAuB/B,EAAAA,EAAAA,KAACoG,EAAAA,GAAS,KACnGjG,EAAAA,EAAAA,MAACF,EAAAA,EAAI,CACDY,KAAMA,EACNjB,KAAK,QACLyG,SAAU,CACNC,KAAM,IAEVC,WAAY,CACRD,KAAM,IAEVE,MAAO,CACHC,SAAU,QAEdC,cAAelG,EACfmG,SA7IMC,IACd,MAAMnG,EAAS,GAEfc,EAAcqD,KAAIC,IACdpE,EAAOuE,KAAKH,EAAMC,IAAI,IAG1B,MAAMlD,EAAO,CACTnB,SACAC,SAAUkG,EAAOlG,SACjBC,SAAUiG,EAAOjG,SACjBkG,SAAUD,EAAOC,SACjBC,aAAcF,EAAOE,aACrBC,aAAcH,EAAOG,aACrBC,aAAcJ,EAAOI,cAErBzD,EAEAI,EAAY,CAACxB,IAAK,kBAAmBP,OAAMoC,GAAI/C,IAE/C6B,EAAmB,CAACX,IAAK,mBAAoBP,QACjD,EAyHQqF,eAvHYC,IACpBC,QAAQC,IAAI,UAAWF,EAAU,EAuHzBG,aAAa,MAAKjH,SAAA,EAIlBD,EAAAA,EAAAA,MAACmH,EAAAA,EAAG,CAACC,OAAQ,GAAGnH,SAAA,EAEZJ,EAAAA,EAAAA,KAACwH,EAAAA,EAAG,CAAClB,KAAM,GAAGlG,UACVJ,EAAAA,EAAAA,KAACyH,EAAAA,EAAS,CACN5H,UAAU,EACVC,cAAe,2JACfH,MAAO,4DACPC,KAAM,gBAIdI,EAAAA,EAAAA,KAACwH,EAAAA,EAAG,CAAClB,KAAM,GAAGlG,UACVJ,EAAAA,EAAAA,KAACyH,EAAAA,EAAS,CACN5H,UAAU,EACVC,cAAe,0BACfH,MAAO,cACPC,KAAM,mBAOlBI,EAAAA,EAAAA,KAACsH,EAAAA,EAAG,CAACC,OAAQ,GAAGnH,UACZJ,EAAAA,EAAAA,KAACwH,EAAAA,EAAG,CAAClB,KAAM,GAAGlG,UACVJ,EAAAA,EAAAA,KAACC,EAAAA,EAAKC,KAAI,CACNP,MAAM,qEACNC,KAAM,SACNS,MAAO,CAAC,CAACR,UAAU,EAAMS,QAAS,8HAA0BF,UAC5DJ,EAAAA,EAAAA,KAAC0H,EAAAA,EAAO,CAAAtH,UACJJ,EAAAA,EAAAA,KAAC2H,EAAAA,EAAM,CACHC,SAAU,GACVC,SAAUtG,EACVuG,SAAS,eACTC,SAjHVC,IAA8B,IAA5BH,SAAUI,GAAYD,EAC1C,GAAIC,EAAYC,OAAS3G,EAAc2G,OACnC,OAEJ,MAAM9F,EAAW,IAAI+F,SACM,IAAvBF,EAAYC,SACZ9F,EAASgG,OAAO,kBAAmBH,EAAYA,EAAYC,OAAS,GAAGG,eACvE1G,EAAmB,CAACQ,IAAK,iBAAkBC,aAC/C,EA0G4BkG,UA9EdC,UACd,IAAIC,EAAMC,EAAKtG,IACVqG,IACDA,QAAY,IAAIE,SAASC,IACrB,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAcL,EAAKJ,eAC1BO,EAAOG,OAAS,IAAMJ,EAAQC,EAAOI,OAAO,KAGpD,MAAMnE,EAAQ,IAAIoE,MAClBpE,EAAM2D,IAAMA,EACZ,MAAMU,EAAYvD,OAAOwD,KAAKX,GACrB,OAATU,QAAS,IAATA,GAAAA,EAAWE,SAASC,MAAMxE,EAAMyE,UAAU,EAmEdC,SArGLd,IACvB,MAAMe,EAAqB,GAE3BjI,EAAcqD,KAAKC,KACN,OAALA,QAAK,IAALA,OAAK,EAALA,EAAOC,QAAY,OAAJ2D,QAAI,IAAJA,OAAI,EAAJA,EAAM3D,MACrB0E,EAAmBxE,KAAKH,EAC5B,KAEC2E,EAAmBtB,OAAS,GAC7BrH,EAAK4D,eAAe,CAAChE,OAAQ,KAEjC,MAAM0D,EAAM,CACRsF,UAAW,CAAK,OAAJhB,QAAI,IAAJA,OAAI,EAAJA,EAAM3D,MAEtBb,EAAmB,CAAC9B,IAAK,uBAAwBgC,QACjD3C,EAAiBgI,EAAmB,EAuFRE,aAAcA,KAAM,EAAMtJ,SAEzBmB,EAAc2G,OAAS,GAAK,GAAK,oBAYtDlI,EAAAA,EAAAA,KAAC2J,EAAAA,EAAM,CAACrF,KAAK,UAAUsF,SAAS,SAASpD,MAAO,CAACqD,MAAO,OAAQC,UAAW,QAAQ1J,SAC9EmD,EAAsB,mDAAa,mDAG9C,C","sources":["@crema/core/Form/FormInput.jsx","pages/sample/Partners/PartnersPostEdit.jsx"],"sourcesContent":["import React from 'react';\nimport {Form, Input} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInput = ({label,name,required,required_text,warning}) => {\n    return (\n        <Form.Item\n            label={warning ? <div>\n                <p>{label}</p>\n                <br/>\n                <p>{warning}</p>\n            </div>:<div>{label}</div>}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <Input />\n        </Form.Item>\n    );\n};\n\nexport default FormInput;\n\nFormInput.propTypes = {\n    label: PropTypes.string,\n    warning: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React, {useEffect, useState} from 'react';\nimport {Button, Col, Form, message, Row, Upload} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nimport ImgCrop from \"antd-img-crop\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport FormInput from \"../../../@crema/core/Form/FormInput\";\n\n\n\nconst initialValueForm = {\n    images: [],\n    title_uz: \"\",\n    title_ru: \"\",\n\n};\n\n\nconst PartnersPostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n\n    const [fileListProps, setFileListProps] = useState([]);\n\n\n\n\n    // query-image\n    const {\n        mutate: imagesUploadMutate,\n        data: imagesUpload,\n        isLoading: imagesUploadLoading,\n        isSuccess: imagesUploadSuccess,\n    } = useMutation(({url, formData}) => apiService.postData(url, formData), {\n\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n\n    // query-partners\n    const {\n        mutate: postPartnersMutate,\n        data: postPartners,\n        isLoading: postPartnersLoading,\n        isSuccess: postPartnersSuccess,\n\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editPartnersLoading,\n        data: editPartnersData,\n        refetch: editPartnersRefetch,\n        isSuccess: editPartnersSuccess,\n\n    } = useQuery([\"edit-partners\", editId], () => apiService.getDataByID(\"/about/partners\", editId), {\n        enabled: false\n    });\n\n\n    // put-query\n    const {\n        mutate: putPartners,\n        isLoading: putPartnersLoading,\n        data: putData,\n        isSuccess: putPartnersSuccess\n    } = useMutation(({\n                         url, data, id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // delete image\n\n    const {mutate: imagesDeleteMutate} = useMutation(({url, ids}) => apiService.deleteImages(url, ids), {\n        onSuccess: () => message.success('Success'),\n        onError: (error) => message.error(error.message)\n    });\n\n    //                                              =====useEffect====\n\n    // partners success\n    useEffect(() => {\n        if (putPartnersSuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n        if (postPartnersSuccess || putPartnersSuccess) {\n            navigate('/partners')\n        }\n    }, [postPartners, putData])\n\n    // if edit partners\n    useEffect(() => {\n        if (editId !== \"\") {\n            editPartnersRefetch();\n        }\n    }, [editId]);\n\n    // if no edit partners\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n    }, []);\n\n\n    //edit partners\n    useEffect(() => {\n        const images = [];\n        if (editPartnersData !== undefined) {\n            editPartnersData?.partner_images.map(image => {\n                const data = {\n                    uid: image.id,\n                    name: image.id,\n                    status: \"done\",\n                    url: image.image\n                }\n                images.push(data)\n            })\n\n\n\n        }\n\n        if (editPartnersSuccess) {\n\n            const edit = {\n                title_uz: editPartnersData?.title_uz,\n                title_ru: editPartnersData?.title_ru,\n                images,\n            }\n\n\n            setFileListProps(images);\n            form.setFieldsValue(edit)\n        }\n\n    }, [editPartnersData])\n    const onFinish = (values) => {\n        const images = []\n\n        fileListProps.map(image => {\n            images.push(image.uid)\n        })\n\n        const data = {\n            images,\n            title_uz: values.title_uz,\n            title_ru: values.title_ru,\n            title_en: values.title_en,\n            sub_title_uz: values.sub_title_uz,\n            sub_title_ru: values.sub_title_ru,\n            sub_title_en: values.sub_title_en,\n        };\n        if (editPartnersSuccess) {\n\n            putPartners({url: \"/about/partners\", data, id: editId});\n        } else {\n            postPartnersMutate({url: \"/about/partners/\", data});\n        }\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n    // refresh page again get data\n\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem('myFormValues', JSON.stringify(form.getFieldsValue()),);\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n    // image\n    useEffect(() => {\n        // images\n        if (imagesUploadSuccess) {\n            const initialImage = [...fileListProps]\n            const uploadImg = {\n                uid: imagesUpload?.images[0]?.id,\n                name: imagesUpload?.images[0]?.id,\n                status: \"done\",\n                url: imagesUpload?.images[0]?.url\n            }\n            initialImage.push(uploadImg)\n            form.setFieldsValue({images: [uploadImg]});\n            setFileListProps(initialImage);\n        }\n\n    }, [imagesUpload]);\n\n    const onChangeImage = ({fileList: newFileList}) => {\n        if (newFileList.length < fileListProps.length) {\n            return\n        }\n        const formData = new FormData();\n        if (newFileList.length !== 0) {\n            formData.append(\"uploaded_images\", newFileList[newFileList.length - 1].originFileObj);\n            imagesUploadMutate({url: \"/about/images/\", formData});\n        }\n\n    };\n\n\n\n    const handleRemoveImage = (file) => {\n        const withoutDeleteImage = []\n\n        fileListProps.map((image) => {\n            if (image?.uid !== file?.uid) {\n                withoutDeleteImage.push(image)\n            }\n        })\n        if (!withoutDeleteImage.length > 0) {\n            form.setFieldsValue({images: []});\n        }\n        const ids = {\n            image_ids: [file?.uid]\n        }\n        imagesDeleteMutate({url: \"/about/images/delete\", ids});\n        setFileListProps(withoutDeleteImage)\n\n\n    }\n\n\n\n    const onPreview = async (file) => {\n        let src = file.url;\n        if (!src) {\n            src = await new Promise((resolve) => {\n                const reader = new FileReader();\n                reader.readAsDataURL(file.originFileObj);\n                reader.onload = () => resolve(reader.result);\n            });\n        }\n        const image = new Image();\n        image.src = src;\n        const imgWindow = window.open(src);\n        imgWindow?.document.write(image.outerHTML);\n    };\n\n\n\n\n\n\n\n\n    return (<div>\n        {(postPartnersLoading || editPartnersLoading || putPartnersLoading || imagesUploadLoading) ? <AppLoader/> :\n            <Form\n                form={form}\n                name=\"basic\"\n                labelCol={{\n                    span: 24\n                }}\n                wrapperCol={{\n                    span: 24\n                }}\n                style={{\n                    maxWidth: \"100%\"\n                }}\n                initialValues={initialValueForm}\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n                autoComplete=\"off\"\n            >\n\n\n                <Row gutter={20}>\n\n                    <Col span={24}>\n                        <FormInput\n                            required={true}\n                            required_text={'Необходимо ввести заголовок'}\n                            label={'Заголовок Ru'}\n                            name={'title_ru'}\n                        />\n\n                    </Col>\n                    <Col span={24}>\n                        <FormInput\n                            required={true}\n                            required_text={'Sarlavha kiritish kerak'}\n                            label={'Sarlavha Uz'}\n                            name={'title_uz'}\n                        />\n\n\n                    </Col>\n\n                </Row>\n                <Row gutter={20}>\n                    <Col span={24}>\n                        <Form.Item\n                            label='Изображение'\n                            name={'images'}\n                            rules={[{required: true, message: 'Требуется изображение'}]}>\n                            <ImgCrop>\n                                <Upload\n                                    maxCount={30}\n                                    fileList={fileListProps}\n                                    listType='picture-card'\n                                    onChange={onChangeImage}\n                                    onPreview={onPreview}\n                                    onRemove={handleRemoveImage}\n                                    beforeUpload={() => false}\n                                >\n                                    {fileListProps.length > 29 ? \"\" : \"Upload\"}\n                                </Upload>\n                            </ImgCrop>\n                        </Form.Item>\n                    </Col>\n\n                </Row>\n\n\n\n\n\n                <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                    {editPartnersSuccess ? 'Изменить' : 'Создать'}\n                </Button>\n            </Form>}\n    </div>);\n};\n\nexport default PartnersPostEdit;"],"names":["_ref","label","name","required","required_text","warning","_jsx","Form","Item","_jsxs","children","rules","message","Input","initialValueForm","images","title_uz","title_ru","PartnersPostEdit","form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","fileListProps","setFileListProps","useState","mutate","imagesUploadMutate","data","imagesUpload","isLoading","imagesUploadLoading","isSuccess","imagesUploadSuccess","useMutation","url","formData","apiService","postData","onSuccess","success","onError","error","obj","response","concat","postPartnersMutate","postPartners","postPartnersLoading","postPartnersSuccess","_ref2","editPartnersLoading","editPartnersData","refetch","editPartnersRefetch","editPartnersSuccess","useQuery","getDataByID","enabled","putPartners","putPartnersLoading","putData","putPartnersSuccess","_ref3","id","imagesDeleteMutate","_ref4","ids","deleteImages","useEffect","type","EDIT_DATA","payload","setFieldsValue","undefined","partner_images","map","image","uid","status","push","edit","storedValues","JSON","parse","localStorage","getItem","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","_imagesUpload$images$","_imagesUpload$images$2","_imagesUpload$images$3","initialImage","uploadImg","AppLoader","labelCol","span","wrapperCol","style","maxWidth","initialValues","onFinish","values","title_en","sub_title_uz","sub_title_ru","sub_title_en","onFinishFailed","errorInfo","console","log","autoComplete","Row","gutter","Col","FormInput","ImgCrop","Upload","maxCount","fileList","listType","onChange","_ref5","newFileList","length","FormData","append","originFileObj","onPreview","async","src","file","Promise","resolve","reader","FileReader","readAsDataURL","onload","result","Image","imgWindow","open","document","write","outerHTML","onRemove","withoutDeleteImage","image_ids","beforeUpload","Button","htmlType","width","marginTop"],"sourceRoot":""}