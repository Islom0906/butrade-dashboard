{"version":3,"file":"static/js/863.a1ba1dcf.chunk.js","mappings":"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","sources":["pages/sample/Banner/BannerPostEdit.jsx"],"sourcesContent":["import React, {useEffect,  useState} from 'react';\nimport {Button, Col, Form,  message,  Row,  Upload} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport ImgCrop from \"antd-img-crop\";\n\nconst initialValueForm = {\n    image:[],\n\n\n};\n\n\n\n\nconst BannerPostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n    const [fileListProps, setFileListProps] = useState([])\n\n\n\n\n\n    // query-banner\n    const {\n        mutate: postBannerMutate,\n        data: postBanner,\n        isLoading: postBannerLoading,\n        isSuccess: postBannerSuccess,\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editBannerLoading,\n        data: editBannerData,\n        refetch: editBannerRefetch,\n        isSuccess: editBannerSuccess,\n    } = useQuery([\"edit-banner\", editId], () => apiService.getDataByID(\"/about/banner\", editId), {\n        enabled: false\n    });\n    // put-query\n    const {\n        mutate: putBanner,\n        isLoading: putBannerLoading,\n        data: putData,\n        isSuccess: putBannerSuccess\n    } = useMutation(({\n                         url,\n                         data,\n                         id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // banner success\n    useEffect(() => {\n        if (putBannerSuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n\n        if (postBannerSuccess || putBannerSuccess) {\n\n            navigate('/banner')\n        }\n    }, [postBanner, putData])\n\n\n    // if edit contact\n    useEffect(() => {\n        if (editId !== \"\") {\n            editBannerRefetch();\n        }\n    }, [editId]);\n\n    // if no edit banner\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n    }, []);\n\n\n    //edit banner\n    useEffect(() => {\n        if (editBannerSuccess) {\n\n            const image=[{\n                uid: editBannerData.id,\n                name: editBannerData.id,\n                status: \"done\",\n                url: editBannerData.image\n            }];\n\n\n\n            const edit = {\n                image,\n\n            }\n\n\n            setFileListProps(image)\n            form.setFieldsValue(edit)\n        }\n\n    }, [editBannerData])\n\n\n    const onFinish = () => {\n\n\n        const formData = new FormData();\n\n\n\n\n        if (fileListProps[0]?.originFileObj) {\n            formData.append('image', fileListProps[0]?.originFileObj);\n        }\n\n\n\n        if (editBannerData) {\n            putBanner({url: '/about/banner', data: formData, id: editId})\n        } else {\n            postBannerMutate({url: \"/about/banner/\", data: formData});\n        }\n\n\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n\n\n\n    // refresh page again get data\n\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem(\n                'myFormValues',\n                JSON.stringify(form.getFieldsValue()),\n            );\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n\n    // image\n    const onChangeImage = ({fileList: newFileList}) => {\n        setFileListProps(newFileList);\n        form.setFieldsValue({image: newFileList});\n    };\n\n\n\n\n\n    const onPreview = async (file) => {\n        let src = file.url;\n        if (!src) {\n            src = await new Promise((resolve) => {\n                const reader = new FileReader();\n                reader.readAsDataURL(file.originFileObj);\n                reader.onload = () => resolve(reader.result);\n            });\n        }\n        const image = new Image();\n        image.src = src;\n        const imgWindow = window.open(src);\n        imgWindow?.document.write(image.outerHTML);\n    };\n\n\n\n    return (\n        <div>\n            {(postBannerLoading || editBannerLoading || putBannerLoading) ?\n                <AppLoader/> :\n                <Form\n                    form={form}\n                    name=\"basic\"\n                    labelCol={{\n                        span: 24\n                    }}\n                    wrapperCol={{\n                        span: 24\n                    }}\n                    style={{\n                        maxWidth: \"100%\"\n                    }}\n                    initialValues={initialValueForm}\n                    onFinish={onFinish}\n                    onFinishFailed={onFinishFailed}\n                    autoComplete=\"off\"\n                >\n\n                    <Row gutter={20}>\n                        <Col span={12}>\n                            <Form.Item\n                                label='Изображение'\n                                name={'image'}\n                                rules={[{required: true, message: 'Требуется изображение.'}]}>\n                                <ImgCrop rotationSlider>\n                                    <Upload\n                                        maxCount={1}\n                                        fileList={fileListProps}\n                                        listType='picture-card'\n                                        onChange={onChangeImage}\n                                        onPreview={onPreview}\n                                        beforeUpload={() => false}\n                                    >\n                                        {fileListProps.length > 0 ? \"\" : \"Upload\"}\n                                    </Upload>\n                                </ImgCrop>\n                            </Form.Item>\n                        </Col>\n\n                    </Row>\n\n\n\n\n\n\n                    <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                        {\n                            editBannerSuccess ? 'Edit' : 'Add'\n                        }\n                    </Button>\n                </Form>\n            }\n        </div>\n    );\n};\n\nexport default BannerPostEdit;"],"names":["initialValueForm","image","BannerPostEdit","form","Form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","fileListProps","setFileListProps","useState","mutate","postBannerMutate","data","postBanner","isLoading","postBannerLoading","isSuccess","postBannerSuccess","useMutation","_ref","url","apiService","postData","onSuccess","message","success","onError","error","obj","response","concat","editBannerLoading","editBannerData","refetch","editBannerRefetch","editBannerSuccess","useQuery","getDataByID","enabled","putBanner","putBannerLoading","putData","putBannerSuccess","_ref2","id","useEffect","type","EDIT_DATA","payload","setFieldsValue","uid","name","status","edit","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","_jsx","children","AppLoader","_jsxs","labelCol","span","wrapperCol","style","maxWidth","initialValues","onFinish","_fileListProps$","formData","FormData","_fileListProps$2","originFileObj","append","onFinishFailed","errorInfo","console","log","autoComplete","Row","gutter","Col","Item","label","rules","required","ImgCrop","rotationSlider","Upload","maxCount","fileList","listType","onChange","_ref3","newFileList","onPreview","async","src","file","Promise","resolve","reader","FileReader","readAsDataURL","onload","result","Image","imgWindow","open","document","write","outerHTML","beforeUpload","length","Button","htmlType","width","marginTop"],"sourceRoot":""}