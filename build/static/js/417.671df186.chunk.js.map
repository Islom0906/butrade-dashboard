{"version":3,"file":"static/js/417.671df186.chunk.js","mappings":"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","sources":["@crema/core/Form/FormInput.jsx","@crema/core/Form/FormTextArea.jsx","pages/sample/About Index/AboutIndexPostEdit.jsx"],"sourcesContent":["import React from 'react';\nimport {Form, Input} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInput = ({label,name,required,required_text,warning}) => {\n    return (\n        <Form.Item\n            label={warning ? <div>\n                <p>{label}</p>\n                <br/>\n                <p>{warning}</p>\n            </div>:<div>{label}</div>}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <Input />\n        </Form.Item>\n    );\n};\n\nexport default FormInput;\n\nFormInput.propTypes = {\n    label: PropTypes.string,\n    warning: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React from 'react';\nimport {Form } from \"antd\";\nimport TextArea from \"antd/es/input/TextArea\";\nimport PropTypes from \"prop-types\";\n\nconst FormTextArea = ({label,name,required,required_text}) => {\n    return (\n        <Form.Item\n            label={label}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <TextArea rows={4}/>\n        </Form.Item>\n    );\n};\n\nexport default FormTextArea;\n\nFormTextArea.propTypes = {\n    label: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React, {useEffect, useState} from 'react';\nimport {Button, Col, Form,  message, Row, Upload} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nimport ImgCrop from \"antd-img-crop\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport FormInput from \"../../../@crema/core/Form/FormInput\";\nimport FormTextArea from \"../../../@crema/core/Form/FormTextArea\";\n\n\nconst initialValueForm = {\n    image: [],\n    title_uz: \"\",\n    title_ru: \"\",\n    text_ru: \"\",\n    text_uz: \"\",\n};\n\n\nconst AboutIndexPostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n\n    const [fileListProps, setFileListProps] = useState([]);\n\n\n    // query-about-index\n    const {\n        mutate: postAboutIndexMutate,\n        data: postAboutIndex,\n        isLoading: postAboutIndexLoading,\n        isSuccess: postAboutIndexSuccess,\n\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editAboutIndexLoading,\n        data: editAboutIndexData,\n        refetch: editAboutIndexRefetch,\n        isSuccess: editAboutIndexSuccess,\n\n    } = useQuery([\"edit-about-index\", editId], () => apiService.getDataByID(\"/about/index-about-section\", editId), {\n        enabled: false\n    });\n\n\n    // put-query\n    const {\n        mutate: putAboutIndex,\n        isLoading: putAboutIndexLoading,\n        data: putData,\n        isSuccess: putAboutIndexSuccess\n    } = useMutation(({\n                         url, data, id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n\n    //                                              =====useEffect====\n\n    // about-index success\n    useEffect(() => {\n        if (putAboutIndexSuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n        if (postAboutIndexSuccess || putAboutIndexSuccess) {\n            navigate('/about-index')\n        }\n    }, [postAboutIndex, putData])\n\n    // if edit about-index\n    useEffect(() => {\n        if (editId !== \"\") {\n            editAboutIndexRefetch();\n        }\n    }, [editId]);\n\n    // if no edit about-index\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n    }, []);\n\n\n    //edit about-index\n    useEffect(() => {\n\n\n        const image = [{\n            uid: editAboutIndexData?.id,\n            name: editAboutIndexData?.id,\n            status: \"done\",\n            url: editAboutIndexData?.image\n        }]\n\n\n        if (editAboutIndexSuccess) {\n\n            const edit = {\n                title_uz: editAboutIndexData?.title_uz,\n                title_ru: editAboutIndexData?.title_ru,\n                text_ru: editAboutIndexData?.text_ru,\n                text_uz: editAboutIndexData?.text_uz,\n                image,\n            }\n\n\n            setFileListProps(image);\n            form.setFieldsValue(edit)\n        }\n\n    }, [editAboutIndexData])\n    const onFinish = (values) => {\n        const formData = new FormData();\n\n        formData.append('title_ru', values.title_ru);\n        formData.append('title_uz', values.title_uz);\n        formData.append('text_ru', values.text_ru);\n        formData.append('text_uz', values.text_uz);\n\n\n        if (fileListProps[0]?.originFileObj) {\n            formData.append('image', fileListProps[0]?.originFileObj);\n        }\n\n        if (editAboutIndexSuccess) {\n\n            putAboutIndex({url: \"/about/index-about-section\", data: formData, id: editId});\n        } else {\n            postAboutIndexMutate({url: \"/about/index-about-section/\", data: formData});\n        }\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n    // refresh page again get data\n\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem('myFormValues', JSON.stringify(form.getFieldsValue()),);\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n\n    const onChangeImage = ({fileList: newFileList}) => {\n        setFileListProps(newFileList);\n        form.setFieldsValue({image: newFileList});\n\n    };\n\n\n    const onPreview = async (file) => {\n        let src = file.url;\n        if (!src) {\n            src = await new Promise((resolve) => {\n                const reader = new FileReader();\n                reader.readAsDataURL(file.originFileObj);\n                reader.onload = () => resolve(reader.result);\n            });\n        }\n        const image = new Image();\n        image.src = src;\n        const imgWindow = window.open(src);\n        imgWindow?.document.write(image.outerHTML);\n    };\n\n\n    return (<div>\n        {(postAboutIndexLoading || editAboutIndexLoading || putAboutIndexLoading) ? <AppLoader/> :\n            <Form\n                form={form}\n                name=\"basic\"\n                labelCol={{\n                    span: 24\n                }}\n                wrapperCol={{\n                    span: 24\n                }}\n                style={{\n                    maxWidth: \"100%\"\n                }}\n                initialValues={initialValueForm}\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n                autoComplete=\"off\"\n            >\n\n\n                <Row gutter={20}>\n\n                    <Col span={24}>\n                        <FormInput\n                            required={true}\n                            required_text={'Необходимо ввести заголовок'}\n                            label={'Заголовок Ru'}\n                            name={'title_ru'}\n                        />\n\n                    </Col>\n                    <Col span={24}>\n                        <FormInput\n                            required={true}\n                            required_text={'Sarlavha kiritish kerak'}\n                            label={'Sarlavha Uz'}\n                            name={'title_uz'}\n                        />\n\n\n                    </Col>\n\n                </Row>\n                <Row gutter={20}>\n                    <Col span={24}>\n                        <FormTextArea\n                            required={true}\n                            required_text={'Требуется описание'}\n                            label={'Описание Ru'}\n                            name={'text_ru'}\n                        />\n                    </Col>\n                    <Col span={24}>\n                        <FormTextArea\n                            required={true}\n                            required_text={'Tavsif kiritish kerak'}\n                            label={'Tavsif Uz'}\n                            name={'text_uz'}\n                        />\n                    </Col>\n\n                </Row>\n\n                <Row gutter={20}>\n\n                    <Col span={12}>\n                        <Form.Item\n                            label='Изображение'\n                            name={'image'}\n                            rules={[{required: true, message: 'Требуется изображение'}]}>\n                            <ImgCrop>\n                                <Upload\n                                    maxCount={1}\n                                    fileList={fileListProps}\n                                    listType='picture-card'\n                                    onChange={onChangeImage}\n                                    onPreview={onPreview}\n                                    beforeUpload={() => false}\n                                >\n                                    {fileListProps.length > 0 ? \"\" : \"Upload\"}\n                                </Upload>\n                            </ImgCrop>\n                        </Form.Item>\n                    </Col>\n\n                </Row>\n\n\n                <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                    {editAboutIndexSuccess ? 'Изменить' : 'Создать'}\n                </Button>\n            </Form>}\n    </div>);\n};\n\nexport default AboutIndexPostEdit;"],"names":["_ref","label","name","required","required_text","warning","_jsx","Form","Item","_jsxs","children","rules","message","Input","TextArea","rows","initialValueForm","image","title_uz","title_ru","text_ru","text_uz","AboutIndexPostEdit","form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","fileListProps","setFileListProps","useState","mutate","postAboutIndexMutate","data","postAboutIndex","isLoading","postAboutIndexLoading","isSuccess","postAboutIndexSuccess","useMutation","url","apiService","postData","onSuccess","success","onError","error","obj","response","concat","editAboutIndexLoading","editAboutIndexData","refetch","editAboutIndexRefetch","editAboutIndexSuccess","useQuery","getDataByID","enabled","putAboutIndex","putAboutIndexLoading","putData","putAboutIndexSuccess","_ref2","id","useEffect","type","EDIT_DATA","payload","setFieldsValue","uid","status","edit","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","AppLoader","labelCol","span","wrapperCol","style","maxWidth","initialValues","onFinish","values","_fileListProps$","formData","FormData","_fileListProps$2","append","originFileObj","onFinishFailed","errorInfo","console","log","autoComplete","Row","gutter","Col","FormInput","FormTextArea","ImgCrop","Upload","maxCount","fileList","listType","onChange","_ref3","newFileList","onPreview","async","src","file","Promise","resolve","reader","FileReader","readAsDataURL","onload","result","Image","imgWindow","open","document","write","outerHTML","beforeUpload","length","Button","htmlType","width","marginTop"],"sourceRoot":""}